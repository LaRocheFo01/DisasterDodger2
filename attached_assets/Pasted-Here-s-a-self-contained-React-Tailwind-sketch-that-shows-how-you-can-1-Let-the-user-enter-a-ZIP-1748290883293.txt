Here’s a self-contained React/Tailwind sketch that shows how you can:

1. Let the user enter a ZIP code
2. Lookup which hazards affect that prefix
3. If there’s more than one, pop up a choice of audits
4. If there’s only one, immediately redirect into that audit

Feel free to adapt it to your routing/setup in Replit.

```jsx
import { useState } from 'react'
import { useNavigate } from 'react-router-dom'  // or your router of choice

// 1) Define your ZIP→hazard map
const hazardMap = {
  [Symbol.iterator]: function*() { /* for convenience */ },
  ranges: [
    { start: 900, end: 961, hazards: ['Earthquake','Wildfire'] },
    { start: 970, end: 979, hazards: ['Earthquake','Wildfire'] },
    { start: 980, end: 994, hazards: ['Earthquake','Wildfire'] },
    { start: 995, end: 999, hazards: ['Earthquake'] },
    { start: 320, end: 349, hazards: ['Flood','Hurricane'] },
    { start: 386, end: 397, hazards: ['Flood','Hurricane'] },
    { start: 700, end: 714, hazards: ['Flood','Hurricane'] },
    { start: 750, end: 799, hazards: ['Flood','Hurricane'] },
    { start: 800, end: 816, hazards: ['Wildfire'] },
  ],
}

// 2) Helper to get hazards by ZIP
function getHazardsForZip(zip) {
  const prefix = parseInt(zip.slice(0,3), 10)
  for (let {start,end,hazards} of hazardMap.ranges) {
    if (prefix >= start && prefix <= end) return hazards
  }
  return []
}

// 3) Main component
export default function ZipAuditSelector() {
  const [zip, setZip] = useState('')
  const [found, setFound] = useState([])
  const [showModal, setShowModal] = useState(false)
  const navigate = useNavigate()

  const onSubmit = e => {
    e.preventDefault()
    const hazards = getHazardsForZip(zip)
    setFound(hazards)
    if (hazards.length === 0) {
      alert('We couldn’t map that ZIP code—try another!')
    } else if (hazards.length === 1) {
      // direct to the single audit
      navigate(`/audit/${hazards[0].toLowerCase()}`)
    } else {
      // show choices
      setShowModal(true)
    }
  }

  return (
    <div className="max-w-md mx-auto p-4">
      <form onSubmit={onSubmit} className="space-y-4">
        <label className="block">
          <span className="text-lg font-medium">Enter your ZIP code</span>
          <input
            type="text"
            maxLength={5}
            value={zip}
            onChange={e => setZip(e.target.value.replace(/\D/,''))}
            className="mt-1 block w-full rounded border-gray-300 shadow-sm focus:ring-green-500 focus:border-green-500"
            placeholder="e.g. 94103"
            required
          />
        </label>
        <button
          type="submit"
          className="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700"
        >
          Check My Audits
        </button>
      </form>

      {/* 4) Modal when multiple audits */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-lg max-w-sm w-full p-6">
            <h2 className="text-xl font-semibold mb-4">
              {found.length} Audits Available
            </h2>
            <ul className="space-y-3">
              {found.map(h => (
                <li key={h}>
                  <button
                    onClick={() => navigate(`/audit/${h.toLowerCase()}`)}
                    className="block w-full text-left px-4 py-2 rounded border border-green-600 text-green-600 hover:bg-green-50"
                  >
                    {h} Audit
                  </button>
                </li>
              ))}
            </ul>
            <button
              onClick={() => setShowModal(false)}
              className="mt-6 text-gray-500 hover:underline"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  )
}
```

**How it works**

* **ZIP input**: User types in their 5-digit ZIP.
* **Lookup**: `getHazardsForZip` finds the matching hazard list.
* **Branch**:

  * **0 hazards** → alert “no mapping found.”
  * **1 hazard** → `navigate()` directly into that audit route.
  * **>1 hazards** → opens a modal listing each audit; clicking a button takes you to the chosen audit.

You can drop this into your Replit React app (or adapt it for plain JS) and hook up your actual audit pages at `/audit/flood`, `/audit/earthquake`, etc.
