Below is a summary of the minimal changes needed to wire up the “generate-pdf” endpoint on the back end (so that the client’s call to `/api/audits/{auditId}/generate-pdf` actually reaches the `generatePDFReport` function in `server/report.ts`), plus a quick sanity check of the client-side “Download PDF” button to make sure it’s pointing at the right URL. After these two fixes, clicking **Download Report** in the browser should produce a downloadable PDF instead of silently failing.

---

## 1. Back-end (Node/Express) changes

### 1.1. In `server/index.ts`, import and register `generatePDFReport`

Your code had all of the “hazard‐mapping” logic in `server/routes.ts` but never actually hooked up any Express route that calls `generatePDFReport`. The quickest fix is to:

1. **Import** `generatePDFReport` at the top of `server/index.ts`
2. Immediately under your JSON-parsing and CORS middleware, **register** a POST route at `/api/audits/:auditId/generate-pdf` that calls `generatePDFReport`

Below is a minimal diff showing exactly what to add to the top of `server/index.ts`. (I’ve trimmed out unrelated boilerplate.)

```diff
--- a/server/index.ts
+++ b/server/index.ts
@@ –1,0 +1,18 @@
+import express from 'express';
+import cors from 'cors';
+import bodyParser from 'body-parser';
+// … (other existing imports)
+
+// Add this import (adjust the path if your file is nested differently)
+import { generatePDFReport } from './report';
+
+const app = express();
+app.use(cors());
+app.use(bodyParser.json());
+
+// ── Add this block right after your middleware ─────────────────────────────────
+// Whenever the client POSTs to /api/audits/:auditId/generate-pdf, invoke generatePDFReport:
+app.post(
+  '/api/audits/:auditId/generate-pdf',
+  async (req, res) => {
+    try {
+      await generatePDFReport(req, res);
+    } catch (err) {
+      console.error('Error generating PDF:', err);
+      res.status(500).json({ error: 'Failed to generate PDF' });
+    }
+  }
+);
+// ────────────────────────────────────────────────────────────────────────────────
 
 // … the rest of your existing index.ts (e.g. registerRoutes, app.listen, etc.)
```

#### Key points:

* We import `generatePDFReport` from `./report` (that is, the same file where you actually assemble jsPDF content).
* We register a `POST /api/audits/:auditId/generate-pdf` handler that simply calls `generatePDFReport(req, res)`.
* If `generatePDFReport` throws or rejects, we catch it and send a 500.

Now, any client‐side code that does `fetch('/api/audits/1234/generate-pdf', { method: 'POST', … })` will reach the correct function.

---

## 2. Front-end (React/TypeScript) changes

The client’s “Download Report” button was calling a URL that didn’t exist yet. Once you wire up the back-end route as shown above, the front end will work—but you should double-check that it’s hitting exactly the same path (`/api/audits/${auditId}/generate-pdf`) with `method: 'POST'`. In your `/client/src/components/download-report-button.tsx`, make sure you have something like this:

```ts
// client/src/components/download-report-button.tsx
import React from 'react';
import { Button } from '…'; // however you render a button

type Props = { auditId: string };

export function DownloadReportButton({ auditId }: Props) {
  async function onDownloadClick() {
    try {
      // We send a POST to the exact same URL we registered above on the server.
      const response = await fetch(`/api/audits/${auditId}/generate-pdf`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ /* any JSON payload your generatePDFReport expects; if none, send {} */ }),
      });

      if (!response.ok) {
        throw new Error(`Server returned ${response.status}`);
      }

      // The server should respond with a PDF (Content-Type: application/pdf)
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `report-${auditId}.pdf`;
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
    } catch (err) {
      console.error('Failed to download PDF:', err);
      // Optionally show a toast or alert to the user
    }
  }

  return (
    <Button onClick={onDownloadClick}>
      Download PDF Report
    </Button>
  );
}
```

#### Key points:

* The fetch URL exactly matches the back‐end registration: `POST /api/audits/${auditId}/generate-pdf`.
* We check `response.ok`; if the server actually returns a PDF (with `Content-Type: application/pdf`), we turn it into a blob, create an Object URL, and programmatically click an `<a>` tag to trigger the browser “Save As…”.
* If your `generatePDFReport` function in `server/report.ts` needs any properties from the request body (for instance, you might pass form answers, user data, etc.), you can pass them in `JSON.stringify(...)`. If it doesn’t need anything besides the `auditId` in the URL, you can just send an empty object `{}` or omit `body` altogether (just be sure your back end doesn’t expect a JSON payload it never receives).

---

## 3. Verify `generatePDFReport` itself is streaming a PDF back

Inside `server/report.ts`, your `generatePDFReport` should do something roughly like this (pseudocode):

```ts
// server/report.ts
import { Request, Response } from 'express';
// … other imports, e.g. jsPDF, html2canvas, etc.

export async function generatePDFReport(req: Request, res: Response) {
  const { auditId } = req.params; // exactly matches :auditId in the route above

  // 1) Look up your “audit” data, fetch anything you need from a database, etc.
  // 2) Use jsPDF or another PDF library to assemble the PDF bytes.
  //    For example, with jsPDF:
  const doc = new jsPDF();
  doc.text(`Report for audit ${auditId}`, 10, 10);
  // … draw charts, tables, styling, etc.
  const pdfBytes = doc.output('arraybuffer');

  // 3) Send the PDF back with the correct headers:
  res.setHeader('Content-Type', 'application/pdf');
  res.setHeader('Content-Disposition', `attachment; filename=report-${auditId}.pdf`);
  res.send(Buffer.from(pdfBytes));
}
```

Make sure your actual `generatePDFReport` follows that same pattern. In particular:

1. It must `res.setHeader('Content-Type', 'application/pdf')` before sending.
2. It must write the PDF data (as a Node `Buffer` or stream) via `res.send(...)` or `res.end(...)`.
3. If you’re using a different PDF library (for instance, you render React components to an HTML string and pass them to some HTML→PDF engine), be sure you still send a Buffer or stream of raw PDF bytes, not a JSON object or HTML string.

Once you have:

* A registered route `POST /api/audits/:auditId/generate-pdf → generatePDFReport(...)` in `server/index.ts`
* A `DownloadReportButton` in `client/src/...` that does `fetch('/api/audits/${auditId}/generate-pdf', { method: 'POST' })` and then `response.blob()`
* A `generatePDFReport` implementation that sets `Content-Type: application/pdf` and `res.send`’s the binary buffer

…you should be able to click “Download PDF Report” in the browser, and the browser will prompt you to “Save As…” a `.pdf`.

---

### Summary of edits

1. **`server/index.ts`**

   ```diff
   + import { generatePDFReport } from './report';
   + 
   + // Right after your app.use(bodyParser.json()) / cors / etc.:
   + app.post(
   +   '/api/audits/:auditId/generate-pdf',
   +   async (req, res) => {
   +     try {
   +       await generatePDFReport(req, res);
   +     } catch (err) {
   +       console.error('Error generating PDF:', err);
   +       res.status(500).json({ error: 'Failed to generate PDF' });
   +     }
   +   }
   + );
   ```

2. **`client/src/components/download-report-button.tsx`**

   ```ts
   export function DownloadReportButton({ auditId }: { auditId: string }) {
     async function onDownloadClick() {
       try {
         const response = await fetch(`/api/audits/${auditId}/generate-pdf`, {
           method: 'POST',
           headers: { 'Content-Type': 'application/json' },
           body: JSON.stringify({}), // or any payload your back end expects
         });
         if (!response.ok) throw new Error(`Server returned ${response.status}`);

         const blob = await response.blob();
         const url = window.URL.createObjectURL(blob);
         const a = document.createElement('a');
         a.href = url;
         a.download = `report-${auditId}.pdf`;
         document.body.appendChild(a);
         a.click();
         a.remove();
         window.URL.revokeObjectURL(url);
       } catch (err) {
         console.error('Failed to download PDF:', err);
       }
     }

     return <button onClick={onDownloadClick}>Download PDF Report</button>;
   }
   ```

3. **Ensure** `generatePDFReport(req, res)` in `server/report.ts` actually:

   * Sets `Content-Type: application/pdf`
   * Builds a `Buffer` (or stream) of raw PDF bytes and calls `res.send(buffer)`
   * Does not try to `res.json(...)` or `res.send('some HTML')` (that will break the blob‐to‐PDF pathway on the client)

With those three steps in place, hitting the **Download PDF** button should immediately cause the browser to download a `.pdf` file containing your report’s contents.
