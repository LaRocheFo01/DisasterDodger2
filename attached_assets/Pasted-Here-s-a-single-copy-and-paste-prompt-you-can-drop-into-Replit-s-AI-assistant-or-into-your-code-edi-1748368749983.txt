Here’s a single copy-and-paste prompt you can drop into Replit’s AI assistant (or into your code editor) to scaffold the entire “fill → think → PDF” pipeline end-to-end. Just tweak any file paths or style colors to match your project:

---

**Prompt for Replit AI**

```
You are an expert full-stack JavaScript developer. Scaffold a complete ChatGPT-driven PDF generator in my Replit project. I want:

1. **Dependencies & Setup**  
   - Install and save `pdfkit`, `openai`, and `express`.  
   - Use `process.env.OPENAI_API_KEY` for the API key (I will set it as a Replit secret).  

2. **Directory structure**  
```

/public          ← static assets if needed
/templates       ← full-page PNG/SVG templates page1 → page12
src/
index.js       ← main Express server
server/
report.js    ← API handler that:
• receives { metadata, toc, answers, riskMatrix, recommendations }
• calls OpenAI chat.completions to generate:
{
summary,
comments\[],
quotes\[],
priorityUpgrades\[],
costEstimates\[{item,estimate}],
grantsRebates\[],
riskScore
}
• uses PDFKit to:
– pipe A4 pages from /templates/page1.png…page12.png
– overlay text/graphics at precise coords
• streams the PDF back with `Content-Disposition: attachment; filename="Report.pdf"`
src/
components/
DownloadReportButton.jsx  ← a React component that:
• takes `payload` prop matching handler’s JSON
• POSTs to `/api/report`
• downloads the returned PDF blob

3. **Express app (`src/index.js`)**

   * Import and `app.use(express.json())`
   * Mount `/api/report` to the handler you create
   * Listen on `process.env.PORT || 3000`

4. **OpenAI integration**

   * In `server/report.js`, write a helper `generateReportData({metadata,answers})` that:
     • Uses `openai.chat.completions.create()` with a system prompt instructing ChatGPT to reference FEMA P-530/P-804/P-737/P-312, comment each answer, quote FEMA docs, produce summary, riskScore, upgrades, costs, grants.
     • Parses and returns the JSON.

5. **PDFKit logic**

   * For each page: call `doc.addPage()` then `doc.image(template,0,0,{width:595.28,height:841.89})`
   * Overlay headers, tables, bullets, big risk score, etc. at fixed x/y coordinates.
   * End with `doc.end()` piping to `res`.

6. **Front-end hook**

   * In `DownloadReportButton.jsx`, implement `handleDownload()` to `fetch("/api/report", { method:"POST", body:JSON.stringify(payload) })`, get blob, create object URL, and trigger `<a download>`.

7. **Replit secrets**

   * Remind me to add the `OPENAI_API_KEY` secret in the Replit sidebar.

Please generate all code files in full. Use ES module syntax, and keep styling minimal (Tailwind or plain CSS classes can be added later). Once this is done, I can test “npm run start” → fill the form → click download → get the AI-powered PDF.

```
---

Paste that into the Replit AI assistant and it will spin up the entire scaffold for you. Let me know once it’s generated and we can refine any coordinates or styling!
```
