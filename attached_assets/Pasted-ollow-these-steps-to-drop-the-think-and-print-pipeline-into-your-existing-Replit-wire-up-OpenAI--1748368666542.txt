ollow these steps to drop the “think-and-print” pipeline into your existing Replit, wire up OpenAI (ChatGPT) behind the scenes, and trigger it from your front-end “Download PDF” button.

1. Install dependencies
In your Replit shell (or “Shell” pane), run:

bash
Copy
Edit
npm install pdfkit openai
You should now see both in your package.json under dependencies.

2. Add your OpenAI API key as a Replit secret
In Replit’s sidebar, click the lock icon (“Secrets”).

Add a new secret

Key: OPENAI_API_KEY

Value: your secret key from https://platform.openai.com/account/api-keys

Save.

Replit will inject that into process.env.OPENAI_API_KEY for you.

3. Drop in the server handler
Create a folder src/server/

In there, create report.js (or .ts) and paste the combined handler logic from above:

js
Copy
Edit
import PDFDocument from "pdfkit";
import path from "path";
import OpenAI from "openai";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

async function generateReportData({ metadata, answers }) {
  /* …the system/user prompt + JSON parse… */
}

export default async function handler(req, res) {
  const { metadata, toc, summary, riskMatrix, recommendations, answers } = req.body;
  const reportData = await generateReportData({ metadata, answers });

  res.setHeader("Content-Type", "application/pdf");
  res.setHeader("Content-Disposition", `attachment; filename="Report.pdf"`);
  const doc = new PDFDocument({ size: "A4", margin: 50 });
  doc.pipe(res);

  const tpl = n => path.join(process.cwd(), "templates", `page${n}.png`);
  // …all the doc.image / addPage / text calls…

  doc.end();
}
4. Mount the endpoint in your main server file
If you’re using Express, in your entrypoint (e.g. src/index.js):

js
Copy
Edit
import express from "express";
import reportHandler from "./server/report.js";

const app = express();
app.use(express.json());

// serve your React build or Vite dev middleware here…

// mount:
app.post("/api/report", reportHandler);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log("Listening on", PORT));
If you’re on a serverless framework (Remix, Next.js, etc.), just drop report.js into /api/report.js and it’ll work out of the box.

5. Place your templates
Create a directory /templates at the project root, and upload:

bash
Copy
Edit
/templates
  page1.png   ← cover
  page2.png   ← table of contents
  page3.png   ← exec summary
  … through page12.png
Replit will serve them via path.join(process.cwd(), "templates", …).

6. Hook up the front‐end
In your React component (e.g. the “Audit Complete” page):

jsx
Copy
Edit
import { DownloadReportButton } from "./components/DownloadReportButton";

export default function AuditComplete({ answers, metadata, toc, /*…*/ }) {
  // Assemble exactly the same shape your handler expects:
  const payload = { metadata, toc, summary: "", riskMatrix, recommendations, answers };
  return <DownloadReportButton payload={payload} />;
}
You don’t need to “log in” to ChatGPT in the browser—your server uses the OpenAI API key you stored in Replit’s secrets. Whenever a user clicks Download, your code:

POSTs their answers → /api/report

Server calls OpenAI (ChatGPT) under the hood

PDFKit composes the final PDF and streams it back

That’s it!
No manual editing: users fill a form, click Download, and your Replit server + ChatGPT API auto-renders the full report.

Security: your API key lives only in Replit’s secrets, never in client-side code.

Scaling: Replit (or your host) handles each request independently—you can even swap to your own VPS later without rewriting.

Let me know if any step needs more detail!