Use the following as your Deepseek “user” prompt. It tells the model exactly how to structure its output so that it matches your `ReportTemplate` interface. Paste everything (including the JSON‐schema block) into Deepseek’s prompt field. Whenever you call the API, replace the placeholder fields (e.g. `<ZIP_CODE>`, `<PRIMARY_HAZARD>`, `<ANSWERS_JSON>`) with the real values from your app.

````
You are a report‐generation assistant. Your job is to produce a JSON object that exactly matches the TypeScript interface `ReportTemplate` (shown below). Do not output any extra text or explanation—only the JSON. Use UTF‐8 encoding, double‐quotes, and valid JSON syntax. Preserve the exact property names and nesting.

1.  Always start with:
    {
      "id":    string,
      "name":  string,
      "description": string,
      "sections": [ … ],
      "styling": { … }
    }

2.  For each element of `sections`, produce:
    {
      "id":           one of ["cover","summary","analysis","recommendations","costs","grants"],
      "title":        the human‐readable heading (see the mapping below),
      "type":         one of ["cover","summary","analysis","recommendations","costs","grants"],
      "enabled":      true if the section is required (otherwise false),
      "order":        integer (1‐6) indicating its position,
      "customContent": string  // the actual text for that section
    }

3.  Always include “styling” exactly as defined in the interface below (you may hard‐code the values).

**** TYPE SCRIPT INTERFACES (copy exactly) ****

export interface ReportTemplate {
  id: string;
  name: string;
  description: string;
  sections: ReportSection[];
  styling: ReportStyling;
}

export interface ReportSection {
  id: string;
  title: string;
  type: 'cover' | 'summary' | 'analysis' | 'recommendations' | 'costs' | 'grants' | 'custom';
  enabled: boolean;
  order: number;
  customContent?: string;
}

export interface ReportStyling {
  fonts: {
    primary: string;
    secondary: string;
    size: {
      title: number;
      header: number;
      body: number;
      small: number;
    };
  };
  colors: {
    primary: string;
    secondary: string;
    accent: string;
    text: string;
    lightGray: string;
    background: string;
    white: string;
    danger: string;
    warning: string;
    success: string;
  };
  layout: {
    margins: number;
    pageSize: string;
    spacing: number;
  };
}

export const DEFAULT_TEMPLATE: ReportTemplate = {
  id: 'comprehensive',
  name: 'Comprehensive Safety Report',
  description: 'Complete disaster preparedness assessment with all sections',
  sections: [
    {
      id: 'cover',
      title: 'Cover Page',
      type: 'cover',
      enabled: true,
      order: 1
    },
    {
      id: 'summary',
      title: 'Executive Summary',
      type: 'summary',
      enabled: true,
      order: 2
    },
    {
      id: 'analysis',
      title: 'Detailed Answer Analysis',
      type: 'analysis',
      enabled: true,
      order: 3
    },
    {
      id: 'recommendations',
      title: 'Priority Upgrades & Recommendations',
      type: 'recommendations',
      enabled: true,
      order: 4
    },
    {
      id: 'costs',
      title: 'Cost Estimates & Financial Assistance',
      type: 'costs',
      enabled: true,
      order: 5
    }
  ],
  styling: {
    fonts: {
      primary: 'Helvetica',
      secondary: 'Helvetica-Bold',
      size: {
        title: 36,
        header: 18,
        body: 12,
        small: 10
      }
    },
    colors: {
      primary: "#16A34A",
      secondary: "#10B981",
      accent: "#0F4C81",
      text: "#1F2937",
      lightGray: "#6B7280",
      background: "#F9FAFB",
      white: "#FFFFFF",
      danger: "#DC2626",
      warning: "#F59E0B",
      success: "#10B981"
    },
    layout: {
      margins: 40,
      pageSize: "A4",
      spacing: 20
    }
  }
};

export const EXECUTIVE_TEMPLATE: ReportTemplate = {
  id: 'executive',
  name: 'Executive Summary Report',
  description: 'Condensed report focusing on key findings and recommendations',
  sections: [
    {
      id: 'cover',
      title: 'Cover Page',
      type: 'cover',
      enabled: true,
      order: 1
    },
    {
      id: 'summary',
      title: 'Executive Summary',
      type: 'summary',
      enabled: true,
      order: 2
    },
    {
      id: 'recommendations',
      title: 'Priority Recommendations',
      type: 'recommendations',
      enabled: true,
      order: 3
    }
  ],
  styling: {
    fonts: {
      primary: 'Helvetica',
      secondary: 'Helvetica-Bold',
      size: {
        title: 32,
        header: 16,
        body: 11,
        small: 9
      }
    },
    colors: {
      primary: "#0F4C81",
      secondary: "#16A34A",
      accent: "#10B981",
      text: "#1F2937",
      lightGray: "#6B7280",
      background: "#F8FAFC",
      white: "#FFFFFF",
      danger: "#DC2626",
      warning: "#F59E0B",
      success: "#10B981"
    },
    layout: {
      margins: 50,
      pageSize: "A4",
      spacing: 25
    }
  }
};

export const DETAILED_TEMPLATE: ReportTemplate = {
  id: 'detailed',
  name: 'Detailed Technical Report',
  description: 'In-depth analysis with all technical details and FEMA references',
  sections: [
    {
      id: 'cover',
      title: 'Cover Page',
      type: 'cover',
      enabled: true,
      order: 1
    },
    {
      id: 'summary',
      title: 'Executive Summary',
      type: 'summary',
      enabled: true,
      order: 2
    },
    {
      id: 'analysis',
      title: 'Detailed Answer Analysis',
      type: 'analysis',
      enabled: true,
      order: 3
    },
    {
      id: 'recommendations',
      title: 'Priority Upgrades & Recommendations',
      type: 'recommendations',
      enabled: true,
      order: 4
    },
    {
      id: 'costs',
      title: 'Cost Estimates & Financial Assistance',
      type: 'costs',
      enabled: true,
      order: 5
    },
    {
      id: 'grants',
      title: 'Grant Opportunities',
      type: 'grants',
      enabled: true,
      order: 6
    }
  ],
  styling: {
    fonts: {
      primary: 'Times-Roman',
      secondary: 'Times-Bold',
      size: {
        title: 28,
        header: 16,
        body: 11,
        small: 9
      }
    },
    colors: {
      primary: "#1F2937",
      secondary: "#374151",
      accent: "#16A34A",
      text: "#111827",
      lightGray: "#9CA3AF",
      background: "#FFFFFF",
      white: "#FFFFFF",
      danger: "#DC2626",
      warning: "#F59E0B",
      success: "#059669"
    },
    layout: {
      margins: 35,
      pageSize: "A4",
      spacing: 15
    }
  }
};

export const AVAILABLE_TEMPLATES = [
  DEFAULT_TEMPLATE,
  EXECUTIVE_TEMPLATE,
  DETAILED_TEMPLATE
];

export function getTemplate(templateId: string): ReportTemplate {
  return AVAILABLE_TEMPLATES.find(t => t.id === templateId) || DEFAULT_TEMPLATE;
}

**** END OF INTERFACES ****

4.  Next, you (Deepseek) will be given these input parameters:
   • `templateId`: one of `"comprehensive"`, `"executive"`, or `"detailed"`.  
   • `zipCode`: e.g. `"12345"`.  
   • `primaryHazard`: e.g. `"earthquake"`.  
   • `answers`: a JSON object mapping question IDs to user responses. Example:
     ```
     {
       "q1": "My foundation is unreinforced masonry.",
       "q2": "I have not braced my cripple walls."
       // … etc
     }
     ```
   • `assumptions`: (optional) any extra context, e.g. local building codes.

5.  Your output MUST be **exactly** one JSON object that matches `ReportTemplate`. Fill:
   • `id` with: `"report_<zipCode>_<templateId>_<timestamp>"`  
   • `name` with: `"Safety Report for <zipCode>"`  
   • `description` with: `"Generated on <ISO_datetime> for ZIP <zipCode>, hazard: <primaryHazard>"`  

6.  For each `sections` entry (in the order defined by the chosen template):
   - Set `"enabled": true`.  
   - Set `"order"` to the section’s numeric index (1‐based).  
   - Under `"customContent"`, generate paragraphs using the user’s `answers` to explain hazards, analyze risks, and give recommendations. Tailor each section’s text to the chosen `primaryHazard` and to the answers provided.  
   - Use the exact `"title"` from the interface above.

7.  Finally, set `"styling"` to exactly the values from the chosen template definition (do not invent new colors or fonts).

Example (for `templateId="comprehensive"`, `zipCode="12345"`, `primaryHazard="earthquake"`):
```jsonc
{
  "id": "report_12345_comprehensive_2025-06-05T15:00:00Z",
  "name": "Safety Report for 12345",
  "description": "Generated on 2025-06-05T15:00:00Z for ZIP 12345, hazard: earthquake",
  "sections": [
    {
      "id": "cover",
      "title": "Cover Page",
      "type": "cover",
      "enabled": true,
      "order": 1,
      "customContent": "## Comprehensive Safety Report\nZIP Code: 12345\nPrimary Hazard: Earthquake\nReport Date: 2025-06-05\n…"
    },
    {
      "id": "summary",
      "title": "Executive Summary",
      "type": "summary",
      "enabled": true,
      "order": 2,
      "customContent": "Based on your answers, your home has an unbraced cripple wall and no anchor bolts. These deficiencies significantly increase risk of structural damage in an earthquake.…"
    },
    {
      "id": "analysis",
      "title": "Detailed Answer Analysis",
      "type": "analysis",
      "enabled": true,
      "order": 3,
      "customContent": "Question 1: My foundation is unreinforced masonry. → Unreinforced masonry is brittle and likely to crack during shaking.…\nQuestion 2: I have not braced my cripple walls. → Unbraced cripple walls allow excessive lateral movement.…"
    },
    {
      "id": "recommendations",
      "title": "Priority Upgrades & Recommendations",
      "type": "recommendations",
      "enabled": true,
      "order": 4,
      "customContent": "1. Install anchor bolts at 6 ft on‐center to tie sill plates to the foundation (cost approx. $1500). 2. Brace cripple walls with plywood sheathing and 2x4 blocking.…"
    },
    {
      "id": "costs",
      "title": "Cost Estimates & Financial Assistance",
      "type": "costs",
      "enabled": true,
      "order": 5,
      "customContent": "⦁  Anchor bolts: $1500 (FEMA P-530, p. 35). ⦁ Cripple‐wall bracing: $800 (FEMA P-530, pp. 34–36). \n⦁ Potential insurance credit: 5% off homeowner’s policy if retrofit is certified. \n⦁ Grant link: https://www.fema.gov/grants"
    },
    {
      "id": "grants",
      "title": "Grant Opportunities",
      "type": "grants",
      "enabled": true,
      "order": 6,
      "customContent": "– FEMA Hazard Mitigation Grant Program: https://www.fema.gov/hazard-mitigation-grant-program\n– State Earthquake Retrofit Grant: https://…\n– Local nonprofit funding: https://…"
    }
  ],
  "styling": {
    "fonts": {
      "primary": "Helvetica",
      "secondary": "Helvetica-Bold",
      "size": { "title": 36, "header": 18, "body": 12, "small": 10 }
    },
    "colors": {
      "primary": "#16A34A",
      "secondary": "#10B981",
      "accent": "#0F4C81",
      "text": "#1F2937",
      "lightGray": "#6B7280",
      "background": "#F9FAFB",
      "white": "#FFFFFF",
      "danger": "#DC2626",
      "warning": "#F59E0B",
      "success": "#10B981"
    },
    "layout": { "margins": 40, "pageSize": "A4", "spacing": 20 }
  }
}
````

**Key points**:

* Do **not** wrap your JSON in Markdown or extra code fences—Deepseek must return raw JSON.
* Do **not** include any sections not defined above (no “custom” fields unless you have truly extra content).
* Always respect the exact property names, data types, and nesting from `ReportTemplate`.
* In real use, replace `<ZIP_CODE>`, `<PRIMARY_HAZARD>`, `<ANSWERS_JSON>`, and `<ISO_datetime>` with actual values.

That prompt will force Deepseek to output a JSON blob that exactly follows your template. Once you get that JSON back, feed it into your PDF‐kit generation logic.
