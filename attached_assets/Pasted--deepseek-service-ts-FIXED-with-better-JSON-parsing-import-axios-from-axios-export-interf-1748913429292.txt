// deepseek-service.ts - FIXED with better JSON parsing
import axios from 'axios';

export interface DeepseekAuditResult {
  riskScore: number;
  primaryHazards: string[];
  recommendations: {
    priority: string;
    title: string;
    description: string;
    estimatedCost: string;
    timeframe: string;
    femaCitation?: string;
  }[];
  grantOpportunities: {
    program: string;
    description: string;
    eligibility: string;
    maxAmount: string;
  }[];
  insuranceConsiderations: {
    potentialSavings: string;
    requirements: string[];
    timeline: string;
  };
  summary: string;
  nextSteps: string[];
}

const DEEPSEEK_API_URL = 'https://api.deepseek.com/chat/completions';

export async function callDeepseek(
  answers: Record<string, any>, 
  model: string = 'deepseek-chat'
): Promise<DeepseekAuditResult> {
  const apiKey = process.env.DEEPSEEK_API_KEY;
  
  if (!apiKey) {
    throw new Error('DEEPSEEK_API_KEY environment variable is required');
  }

  const systemPrompt = `You are a professional home safety auditor. Analyze the questionnaire and return ONLY a valid JSON object with this exact structure (no markdown, no explanations, just the JSON):

{
  "riskScore": 65,
  "primaryHazards": ["Earthquake", "Wildfire"],
  "recommendations": [
    {
      "priority": "High",
      "title": "Secure Water Heater",
      "description": "Install earthquake straps on water heater to prevent tipping and gas leaks during seismic events.",
      "estimatedCost": "$150-$300",
      "timeframe": "1-2 hours",
      "femaCitation": "FEMA P-530"
    }
  ],
  "grantOpportunities": [
    {
      "program": "FEMA Hazard Mitigation Grant",
      "description": "Federal funding for hazard mitigation projects",
      "eligibility": "Property owners in declared disaster areas",
      "maxAmount": "$5,000"
    }
  ],
  "insuranceConsiderations": {
    "potentialSavings": "5-15% annual premium reduction",
    "requirements": ["Complete high-priority retrofits", "Provide documentation"],
    "timeline": "Savings available after completion"
  },
  "summary": "Your property shows moderate risk from earthquakes and wildfires. Priority should be given to securing utilities and creating defensible space.",
  "nextSteps": ["Secure water heater", "Clear vegetation", "Review insurance coverage"]
}`;

  const userPrompt = `Analyze this home safety data and provide recommendations:

Property Data:
${JSON.stringify(answers, null, 2)}

Return only the JSON object, no other text.`;

  try {
    console.log('[DeepSeek] Making API call...');
    
    const response = await axios.post(
      DEEPSEEK_API_URL,
      {
        model,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.3, // Lower temperature for more consistent JSON
        max_tokens: 3000
      },
      {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      }
    );

    console.log('[DeepSeek] API response received');
    
    const content = response.data.choices[0].message.content;
    console.log('[DeepSeek] Raw response (first 200 chars):', content.substring(0, 200));

    // Clean the response more aggressively
    let cleanedContent = content.trim();
    
    // Remove common markdown patterns
    cleanedContent = cleanedContent.replace(/```json\s*/g, '');
    cleanedContent = cleanedContent.replace(/```\s*/g, '');
    cleanedContent = cleanedContent.replace(/^[^{]*({.*})[^}]*$/s, '$1');
    
    // Find JSON object boundaries
    const startIndex = cleanedContent.indexOf('{');
    const lastIndex = cleanedContent.lastIndexOf('}');
    
    if (startIndex === -1 || lastIndex === -1) {
      console.error('[DeepSeek] No JSON object found in response:', content);
      throw new Error('No JSON object found in DeepSeek response');
    }
    
    cleanedContent = cleanedContent.substring(startIndex, lastIndex + 1);
    console.log('[DeepSeek] Cleaned JSON (first 200 chars):', cleanedContent.substring(0, 200));

    // Parse the JSON
    let auditResult: DeepseekAuditResult;
    try {
      auditResult = JSON.parse(cleanedContent);
    } catch (parseError) {
      console.error('[DeepSeek] JSON parse failed:', parseError);
      console.error('[DeepSeek] Attempted to parse:', cleanedContent);
      
      // Return a fallback result instead of failing
      console.log('[DeepSeek] Using fallback result due to parse error');
      auditResult = createFallbackResult(answers);
    }

    // Validate the result has required fields
    if (!auditResult.riskScore && auditResult.riskScore !== 0) {
      console.warn('[DeepSeek] Missing riskScore, using fallback');
      auditResult = createFallbackResult(answers);
    }

    console.log('[DeepSeek] Successfully parsed audit result, risk score:', auditResult.riskScore);
    return auditResult;
    
  } catch (error: any) {
    console.error('[DeepSeek] API error:', error.response?.data || error.message);
    
    if (error.response?.status === 401) {
      throw new Error('Invalid DeepSeek API key. Get your free key from https://platform.deepseek.com/');
    }
    
    if (error.response?.status === 429) {
      throw new Error('DeepSeek API rate limit exceeded. Please wait a moment and try again.');
    }
    
    // If API fails completely, return a fallback result
    console.log('[DeepSeek] API failed, using fallback result');
    return createFallbackResult(answers);
  }
}

// Fallback function when API fails or returns invalid JSON
function createFallbackResult(answers: Record<string, any>): DeepseekAuditResult {
  const hazard = answers.primaryHazard || 'Natural Disaster';
  const zipCode = answers.zipCode || 'Unknown';
  
  return {
    riskScore: 45,
    primaryHazards: [hazard, 'General Weather Events'],
    recommendations: [
      {
        priority: 'High',
        title: 'Emergency Kit Preparation',
        description: 'Assemble a 72-hour emergency kit with water, food, flashlights, and first aid supplies.',
        estimatedCost: '$200-$500',
        timeframe: '1-2 days',
        femaCitation: 'FEMA Ready.gov'
      },
      {
        priority: 'Medium',
        title: 'Home Safety Assessment',
        description: 'Conduct a detailed walkthrough to identify specific vulnerabilities in your home.',
        estimatedCost: '$0-$200',
        timeframe: '1 week'
      },
      {
        priority: 'Medium',
        title: 'Insurance Review',
        description: 'Review your current insurance coverage to ensure adequate protection.',
        estimatedCost: '$0',
        timeframe: '1-2 hours'
      }
    ],
    grantOpportunities: [
      {
        program: 'FEMA Individual Assistance',
        description: 'Federal assistance for disaster recovery and mitigation',
        eligibility: 'Property owners affected by federally declared disasters',
        maxAmount: 'Varies by program'
      }
    ],
    insuranceConsiderations: {
      potentialSavings: '5-10% annual premium reduction',
      requirements: ['Complete basic safety improvements', 'Document upgrades'],
      timeline: 'Savings available after verification'
    },
    summary: `Based on your location in ${zipCode} and primary concern about ${hazard}, your property has moderate risk exposure. Focus on basic preparedness and safety improvements to reduce vulnerability.`,
    nextSteps: [
      'Prepare emergency kit',
      'Review insurance coverage',
      'Identify specific home vulnerabilities',
      'Consider professional safety assessment'
    ]
  };
}

// Keep your existing renderAuditHTML function
export function renderAuditHTML(audit: DeepseekAuditResult, auditData: any): string {
  // ... your existing HTML rendering code
  return `<html><!-- Your existing HTML template --></html>`;
}